(()=>{"use strict";function t(t){return"function"==typeof t}function e(e){return function(n){if(function(e){return t(null==e?void 0:e.lift)}(n))return n.lift((function(t){try{return e(t,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}var n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},n(t,e)};function r(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}function i(t,e){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(u){return function(c){return function(u){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,u[0]&&(s=0)),s;)try{if(n=1,r&&(i=2&u[0]?r.return:u[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,u[1])).done)return i;switch(r=0,i&&(u=[2&u[0],i.value]),u[0]){case 0:case 1:i=u;break;case 4:return s.label++,{value:u[1],done:!1};case 5:s.label++,r=u[1],u=[0];continue;case 7:u=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==u[0]&&2!==u[0])){s=0;continue}if(3===u[0]&&(!i||u[1]>i[0]&&u[1]<i[3])){s.label=u[1];break}if(6===u[0]&&s.label<i[1]){s.label=i[1],i=u;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(u);break}i[2]&&s.ops.pop(),s.trys.pop();continue}u=e.call(t,s)}catch(t){u=[6,t],r=0}finally{n=i=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,c])}}}function o(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function s(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)s.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return s}function u(t,e,n){if(n||2===arguments.length)for(var r,i=0,o=e.length;i<o;i++)!r&&i in e||(r||(r=Array.prototype.slice.call(e,0,i)),r[i]=e[i]);return t.concat(r||Array.prototype.slice.call(e))}function c(t){return this instanceof c?(this.v=t,this):new c(t)}function a(t){var e=t((function(t){Error.call(t),t.stack=(new Error).stack}));return e.prototype=Object.create(Error.prototype),e.prototype.constructor=e,e}Object.create,Object.create;var l=a((function(t){return function(e){t(this),this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e}}));function f(t,e){if(t){var n=t.indexOf(e);0<=n&&t.splice(n,1)}}var h=function(){function e(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._finalizers=null}return e.prototype.unsubscribe=function(){var e,n,r,i,c;if(!this.closed){this.closed=!0;var a=this._parentage;if(a)if(this._parentage=null,Array.isArray(a))try{for(var f=o(a),h=f.next();!h.done;h=f.next())h.value.remove(this)}catch(t){e={error:t}}finally{try{h&&!h.done&&(n=f.return)&&n.call(f)}finally{if(e)throw e.error}}else a.remove(this);var d=this.initialTeardown;if(t(d))try{d()}catch(t){c=t instanceof l?t.errors:[t]}var p=this._finalizers;if(p){this._finalizers=null;try{for(var y=o(p),b=y.next();!b.done;b=y.next()){var g=b.value;try{v(g)}catch(t){c=null!=c?c:[],t instanceof l?c=u(u([],s(c)),s(t.errors)):c.push(t)}}}catch(t){r={error:t}}finally{try{b&&!b.done&&(i=y.return)&&i.call(y)}finally{if(r)throw r.error}}}if(c)throw new l(c)}},e.prototype.add=function(t){var n;if(t&&t!==this)if(this.closed)v(t);else{if(t instanceof e){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(t)}},e.prototype._hasParent=function(t){var e=this._parentage;return e===t||Array.isArray(e)&&e.includes(t)},e.prototype._addParent=function(t){var e=this._parentage;this._parentage=Array.isArray(e)?(e.push(t),e):e?[e,t]:t},e.prototype._removeParent=function(t){var e=this._parentage;e===t?this._parentage=null:Array.isArray(e)&&f(e,t)},e.prototype.remove=function(t){var n=this._finalizers;n&&f(n,t),t instanceof e&&t._removeParent(this)},e.EMPTY=((n=new e).closed=!0,n),e;var n}(),d=h.EMPTY;function p(e){return e instanceof h||e&&"closed"in e&&t(e.remove)&&t(e.add)&&t(e.unsubscribe)}function v(e){t(e)?e():e.unsubscribe()}var y={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},b={setTimeout:function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i=b.delegate;return(null==i?void 0:i.setTimeout)?i.setTimeout.apply(i,u([t,e],s(n))):setTimeout.apply(void 0,u([t,e],s(n)))},clearTimeout:function(t){var e=b.delegate;return((null==e?void 0:e.clearTimeout)||clearTimeout)(t)},delegate:void 0};function g(t){b.setTimeout((function(){var e=y.onUnhandledError;if(!e)throw t;e(t)}))}function m(){}var x=w("C",void 0,void 0);function w(t,e,n){return{kind:t,value:e,error:n}}var I=null;function E(t){if(y.useDeprecatedSynchronousErrorHandling){var e=!I;if(e&&(I={errorThrown:!1,error:null}),t(),e){var n=I,r=n.errorThrown,i=n.error;if(I=null,r)throw i}}else t()}var S=function(t){function e(e){var n=t.call(this)||this;return n.isStopped=!1,e?(n.destination=e,p(e)&&e.add(n)):n.destination=O,n}return r(e,t),e.create=function(t,e,n){return new k(t,e,n)},e.prototype.next=function(t){this.isStopped?P(function(t){return w("N",t,void 0)}(t),this):this._next(t)},e.prototype.error=function(t){this.isStopped?P(w("E",void 0,t),this):(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped?P(x,this):(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},e.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},e}(h),_=Function.prototype.bind;function M(t,e){return _.call(t,e)}var A=function(){function t(t){this.partialObserver=t}return t.prototype.next=function(t){var e=this.partialObserver;if(e.next)try{e.next(t)}catch(t){j(t)}},t.prototype.error=function(t){var e=this.partialObserver;if(e.error)try{e.error(t)}catch(t){j(t)}else j(t)},t.prototype.complete=function(){var t=this.partialObserver;if(t.complete)try{t.complete()}catch(t){j(t)}},t}(),k=function(e){function n(n,r,i){var o,s,u=e.call(this)||this;return t(n)||!n?o={next:null!=n?n:void 0,error:null!=r?r:void 0,complete:null!=i?i:void 0}:u&&y.useDeprecatedNextContext?((s=Object.create(n)).unsubscribe=function(){return u.unsubscribe()},o={next:n.next&&M(n.next,s),error:n.error&&M(n.error,s),complete:n.complete&&M(n.complete,s)}):o=n,u.destination=new A(o),u}return r(n,e),n}(S);function j(t){var e;y.useDeprecatedSynchronousErrorHandling?(e=t,y.useDeprecatedSynchronousErrorHandling&&I&&(I.errorThrown=!0,I.error=e)):g(t)}function P(t,e){var n=y.onStoppedNotification;n&&b.setTimeout((function(){return n(t,e)}))}var O={closed:!0,next:m,error:function(t){throw t},complete:m};function C(t,e,n,r,i){return new T(t,e,n,r,i)}var T=function(t){function e(e,n,r,i,o,s){var u=t.call(this,e)||this;return u.onFinalize=o,u.shouldUnsubscribe=s,u._next=n?function(t){try{n(t)}catch(t){e.error(t)}}:t.prototype._next,u._error=i?function(t){try{i(t)}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._error,u._complete=r?function(){try{r()}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,u}return r(e,t),e.prototype.unsubscribe=function(){var e;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;t.prototype.unsubscribe.call(this),!n&&(null===(e=this.onFinalize)||void 0===e||e.call(this))}},e}(S);function z(t){return t}function B(n,r,i){var o=t(n)||r||i?{next:n,error:r,complete:i}:n;return o?e((function(t,e){var n;null===(n=o.subscribe)||void 0===n||n.call(o);var r=!0;t.subscribe(C(e,(function(t){var n;null===(n=o.next)||void 0===n||n.call(o,t),e.next(t)}),(function(){var t;r=!1,null===(t=o.complete)||void 0===t||t.call(o),e.complete()}),(function(t){var n;r=!1,null===(n=o.error)||void 0===n||n.call(o,t),e.error(t)}),(function(){var t,e;r&&(null===(t=o.unsubscribe)||void 0===t||t.call(o)),null===(e=o.finalize)||void 0===e||e.call(o)})))})):z}function $(t,n){return e((function(e,r){var i=0;e.subscribe(C(r,(function(e){r.next(t.call(n,e,i++))})))}))}var R=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function L(e){return t(null==e?void 0:e.then)}var H="function"==typeof Symbol&&Symbol.observable||"@@observable";var N=function(){function e(t){t&&(this._subscribe=t)}return e.prototype.lift=function(t){var n=new e;return n.source=this,n.operator=t,n},e.prototype.subscribe=function(e,n,r){var i,o=this,s=(i=e)&&i instanceof S||function(e){return e&&t(e.next)&&t(e.error)&&t(e.complete)}(i)&&p(i)?e:new k(e,n,r);return E((function(){var t=o,e=t.operator,n=t.source;s.add(e?e.call(s,n):n?o._subscribe(s):o._trySubscribe(s))})),s},e.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){t.error(e)}},e.prototype.forEach=function(t,e){var n=this;return new(e=D(e))((function(e,r){var i=new k({next:function(e){try{t(e)}catch(t){r(t),i.unsubscribe()}},error:r,complete:e});n.subscribe(i)}))},e.prototype._subscribe=function(t){var e;return null===(e=this.source)||void 0===e?void 0:e.subscribe(t)},e.prototype[H]=function(){return this},e.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return(0===(n=t).length?z:1===n.length?n[0]:function(t){return n.reduce((function(t,e){return e(t)}),t)})(this);var n},e.prototype.toPromise=function(t){var e=this;return new(t=D(t))((function(t,n){var r;e.subscribe((function(t){return r=t}),(function(t){return n(t)}),(function(){return t(r)}))}))},e.create=function(t){return new e(t)},e}();function D(t){var e;return null!==(e=null!=t?t:y.Promise)&&void 0!==e?e:Promise}function G(e){return t(e[H])}function F(e){return Symbol.asyncIterator&&t(null==e?void 0:e[Symbol.asyncIterator])}function U(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var q="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function Y(e){return t(null==e?void 0:e[q])}function V(t){return function(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(t,e||[]),o=[];return r={},s("next"),s("throw"),s("return"),r[Symbol.asyncIterator]=function(){return this},r;function s(t){i[t]&&(r[t]=function(e){return new Promise((function(n,r){o.push([t,e,n,r])>1||u(t,e)}))})}function u(t,e){try{(n=i[t](e)).value instanceof c?Promise.resolve(n.value.v).then(a,l):f(o[0][2],n)}catch(t){f(o[0][3],t)}var n}function a(t){u("next",t)}function l(t){u("throw",t)}function f(t,e){t(e),o.shift(),o.length&&u(o[0][0],o[0][1])}}(this,arguments,(function(){var e,n,r;return i(this,(function(i){switch(i.label){case 0:e=t.getReader(),i.label=1;case 1:i.trys.push([1,,9,10]),i.label=2;case 2:return[4,c(e.read())];case 3:return n=i.sent(),r=n.value,n.done?[4,c(void 0)]:[3,5];case 4:return[2,i.sent()];case 5:return[4,c(r)];case 6:return[4,i.sent()];case 7:return i.sent(),[3,2];case 8:return[3,10];case 9:return e.releaseLock(),[7];case 10:return[2]}}))}))}function J(e){return t(null==e?void 0:e.getReader)}function K(e){if(e instanceof N)return e;if(null!=e){if(G(e))return s=e,new N((function(e){var n=s[H]();if(t(n.subscribe))return n.subscribe(e);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(R(e))return i=e,new N((function(t){for(var e=0;e<i.length&&!t.closed;e++)t.next(i[e]);t.complete()}));if(L(e))return r=e,new N((function(t){r.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,g)}));if(F(e))return Q(e);if(Y(e))return n=e,new N((function(t){var e,r;try{for(var i=o(n),s=i.next();!s.done;s=i.next()){var u=s.value;if(t.next(u),t.closed)return}}catch(t){e={error:t}}finally{try{s&&!s.done&&(r=i.return)&&r.call(i)}finally{if(e)throw e.error}}t.complete()}));if(J(e))return Q(V(e))}var n,r,i,s;throw U(e)}function Q(t){return new N((function(e){(function(t,e){var n,r,s,u,c,a,l,f;return c=this,a=void 0,f=function(){var c,a;return i(this,(function(i){switch(i.label){case 0:i.trys.push([0,5,6,11]),n=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=o(t),e={},r("next"),r("throw"),r("return"),e[Symbol.asyncIterator]=function(){return this},e);function r(n){e[n]=t[n]&&function(e){return new Promise((function(r,i){!function(t,e,n,r){Promise.resolve(r).then((function(e){t({value:e,done:n})}),e)}(r,i,(e=t[n](e)).done,e.value)}))}}}(t),i.label=1;case 1:return[4,n.next()];case 2:if((r=i.sent()).done)return[3,4];if(c=r.value,e.next(c),e.closed)return[2];i.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return a=i.sent(),s={error:a},[3,11];case 6:return i.trys.push([6,,9,10]),r&&!r.done&&(u=n.return)?[4,u.call(n)]:[3,8];case 7:i.sent(),i.label=8;case 8:return[3,10];case 9:if(s)throw s.error;return[7];case 10:return[7];case 11:return e.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(t,e){function n(t){try{i(f.next(t))}catch(t){e(t)}}function r(t){try{i(f.throw(t))}catch(t){e(t)}}function i(e){var i;e.done?t(e.value):(i=e.value,i instanceof l?i:new l((function(t){t(i)}))).then(n,r)}i((f=f.apply(c,a||[])).next())}))})(t,e).catch((function(t){return e.error(t)}))}))}function W(e){return e&&t(e.schedule)}function X(t){return t[t.length-1]}function Z(e){return t(X(e))?e.pop():void 0}function tt(t){return W(X(t))?t.pop():void 0}function et(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=Z(t);return e((function(e,n){for(var i=t.length,o=new Array(i),c=t.map((function(){return!1})),a=!1,l=function(e){K(t[e]).subscribe(C(n,(function(t){o[e]=t,a||c[e]||(c[e]=!0,(a=c.every(z))&&(c=null))}),m))},f=0;f<i;f++)l(f);e.subscribe(C(n,(function(t){if(a){var e=u([t],s(o));n.next(r?r.apply(void 0,u([],s(e))):e)}})))}))}var nt=a((function(t){return function(){t(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),rt=function(t){function e(){var e=t.call(this)||this;return e.closed=!1,e.currentObservers=null,e.observers=[],e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return r(e,t),e.prototype.lift=function(t){var e=new it(this,this);return e.operator=t,e},e.prototype._throwIfClosed=function(){if(this.closed)throw new nt},e.prototype.next=function(t){var e=this;E((function(){var n,r;if(e._throwIfClosed(),!e.isStopped){e.currentObservers||(e.currentObservers=Array.from(e.observers));try{for(var i=o(e.currentObservers),s=i.next();!s.done;s=i.next())s.value.next(t)}catch(t){n={error:t}}finally{try{s&&!s.done&&(r=i.return)&&r.call(i)}finally{if(n)throw n.error}}}}))},e.prototype.error=function(t){var e=this;E((function(){if(e._throwIfClosed(),!e.isStopped){e.hasError=e.isStopped=!0,e.thrownError=t;for(var n=e.observers;n.length;)n.shift().error(t)}}))},e.prototype.complete=function(){var t=this;E((function(){if(t._throwIfClosed(),!t.isStopped){t.isStopped=!0;for(var e=t.observers;e.length;)e.shift().complete()}}))},e.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(e.prototype,"observed",{get:function(){var t;return(null===(t=this.observers)||void 0===t?void 0:t.length)>0},enumerable:!1,configurable:!0}),e.prototype._trySubscribe=function(e){return this._throwIfClosed(),t.prototype._trySubscribe.call(this,e)},e.prototype._subscribe=function(t){return this._throwIfClosed(),this._checkFinalizedStatuses(t),this._innerSubscribe(t)},e.prototype._innerSubscribe=function(t){var e=this,n=this,r=n.hasError,i=n.isStopped,o=n.observers;return r||i?d:(this.currentObservers=null,o.push(t),new h((function(){e.currentObservers=null,f(o,t)})))},e.prototype._checkFinalizedStatuses=function(t){var e=this,n=e.hasError,r=e.thrownError,i=e.isStopped;n?t.error(r):i&&t.complete()},e.prototype.asObservable=function(){var t=new N;return t.source=this,t},e.create=function(t,e){return new it(t,e)},e}(N),it=function(t){function e(e,n){var r=t.call(this)||this;return r.destination=e,r.source=n,r}return r(e,t),e.prototype.next=function(t){var e,n;null===(n=null===(e=this.destination)||void 0===e?void 0:e.next)||void 0===n||n.call(e,t)},e.prototype.error=function(t){var e,n;null===(n=null===(e=this.destination)||void 0===e?void 0:e.error)||void 0===n||n.call(e,t)},e.prototype.complete=function(){var t,e;null===(e=null===(t=this.destination)||void 0===t?void 0:t.complete)||void 0===e||e.call(t)},e.prototype._subscribe=function(t){var e,n;return null!==(n=null===(e=this.source)||void 0===e?void 0:e.subscribe(t))&&void 0!==n?n:d},e}(rt),ot=function(t){function e(e,n){return t.call(this)||this}return r(e,t),e.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},e}(h),st={setInterval:function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i=st.delegate;return(null==i?void 0:i.setInterval)?i.setInterval.apply(i,u([t,e],s(n))):setInterval.apply(void 0,u([t,e],s(n)))},clearInterval:function(t){var e=st.delegate;return((null==e?void 0:e.clearInterval)||clearInterval)(t)},delegate:void 0},ut=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r.pending=!1,r}return r(e,t),e.prototype.schedule=function(t,e){var n;if(void 0===e&&(e=0),this.closed)return this;this.state=t;var r=this.id,i=this.scheduler;return null!=r&&(this.id=this.recycleAsyncId(i,r,e)),this.pending=!0,this.delay=e,this.id=null!==(n=this.id)&&void 0!==n?n:this.requestAsyncId(i,this.id,e),this},e.prototype.requestAsyncId=function(t,e,n){return void 0===n&&(n=0),st.setInterval(t.flush.bind(t,this),n)},e.prototype.recycleAsyncId=function(t,e,n){if(void 0===n&&(n=0),null!=n&&this.delay===n&&!1===this.pending)return e;null!=e&&st.clearInterval(e)},e.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,e){var n,r=!1;try{this.work(t)}catch(t){r=!0,n=t||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),n},e.prototype.unsubscribe=function(){if(!this.closed){var e=this.id,n=this.scheduler,r=n.actions;this.work=this.state=this.scheduler=null,this.pending=!1,f(r,this),null!=e&&(this.id=this.recycleAsyncId(n,e,null)),this.delay=null,t.prototype.unsubscribe.call(this)}},e}(ot),ct={now:function(){return(ct.delegate||Date).now()},delegate:void 0},at=function(){function t(e,n){void 0===n&&(n=t.now),this.schedulerActionCtor=e,this.now=n}return t.prototype.schedule=function(t,e,n){return void 0===e&&(e=0),new this.schedulerActionCtor(this,t).schedule(n,e)},t.now=ct.now,t}(),lt=new(function(t){function e(e,n){void 0===n&&(n=at.now);var r=t.call(this,e,n)||this;return r.actions=[],r._active=!1,r}return r(e,t),e.prototype.flush=function(t){var e=this.actions;if(this._active)e.push(t);else{var n;this._active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this._active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}},e}(at))(ut),ft=lt;function ht(t,e,n){void 0===t&&(t=0),void 0===n&&(n=ft);var r=-1;return null!=e&&(W(e)?n=e:r=e),new N((function(e){var i,o=(i=t)instanceof Date&&!isNaN(i)?+t-n.now():t;o<0&&(o=0);var s=0;return n.schedule((function(){e.closed||(e.next(s++),0<=r?this.schedule(void 0,r):e.complete())}),o)}))}var dt=Array.isArray,pt=Object.getPrototypeOf,vt=Object.prototype,yt=Object.keys;function bt(t,e,n,r,i){void 0===r&&(r=0),void 0===i&&(i=!1);var o=e.schedule((function(){n(),i?t.add(this.schedule(null,r)):this.unsubscribe()}),r);if(t.add(o),!i)return o}function gt(t,n){return void 0===n&&(n=0),e((function(e,r){e.subscribe(C(r,(function(e){return bt(r,t,(function(){return r.next(e)}),n)}),(function(){return bt(r,t,(function(){return r.complete()}),n)}),(function(e){return bt(r,t,(function(){return r.error(e)}),n)})))}))}function mt(t,n){return void 0===n&&(n=0),e((function(e,r){r.add(t.schedule((function(){return e.subscribe(r)}),n))}))}function xt(t,e){if(!t)throw new Error("Iterable cannot be null");return new N((function(n){bt(n,e,(function(){var r=t[Symbol.asyncIterator]();bt(n,e,(function(){r.next().then((function(t){t.done?n.complete():n.next(t.value)}))}),0,!0)}))}))}function wt(e,n){return n?function(e,n){if(null!=e){if(G(e))return function(t,e){return K(t).pipe(mt(e),gt(e))}(e,n);if(R(e))return function(t,e){return new N((function(n){var r=0;return e.schedule((function(){r===t.length?n.complete():(n.next(t[r++]),n.closed||this.schedule())}))}))}(e,n);if(L(e))return function(t,e){return K(t).pipe(mt(e),gt(e))}(e,n);if(F(e))return xt(e,n);if(Y(e))return function(e,n){return new N((function(r){var i;return bt(r,n,(function(){i=e[q](),bt(r,n,(function(){var t,e,n;try{e=(t=i.next()).value,n=t.done}catch(t){return void r.error(t)}n?r.complete():r.next(e)}),0,!0)})),function(){return t(null==i?void 0:i.return)&&i.return()}}))}(e,n);if(J(e))return function(t,e){return xt(V(t),e)}(e,n)}throw U(e)}(e,n):K(e)}var It=Array.isArray;function Et(t){return $((function(e){return function(t,e){return It(e)?t.apply(void 0,u([],s(e))):t(e)}(t,e)}))}function St(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=tt(t),r=Z(t),i=function(t){if(1===t.length){var e=t[0];if(dt(e))return{args:e,keys:null};if((r=e)&&"object"==typeof r&&pt(r)===vt){var n=yt(e);return{args:n.map((function(t){return e[t]})),keys:n}}}var r;return{args:t,keys:null}}(t),o=i.args,s=i.keys;if(0===o.length)return wt([],n);var u=new N(function(t,e,n){return void 0===n&&(n=z),function(r){_t(e,(function(){for(var i=t.length,o=new Array(i),s=i,u=i,c=function(i){_t(e,(function(){var c=wt(t[i],e),a=!1;c.subscribe(C(r,(function(t){o[i]=t,a||(a=!0,u--),u||r.next(n(o.slice()))}),(function(){--s||r.complete()})))}),r)},a=0;a<i;a++)c(a)}),r)}}(o,n,s?function(t){return function(t,e){return t.reduce((function(t,n,r){return t[n]=e[r],t}),{})}(s,t)}:z));return r?u.pipe(Et(r)):u}function _t(t,e,n){t?bt(n,t,e):e()}var Mt=function(t){function e(e){var n=t.call(this)||this;return n._value=e,n}return r(e,t),Object.defineProperty(e.prototype,"value",{get:function(){return this.getValue()},enumerable:!1,configurable:!0}),e.prototype._subscribe=function(e){var n=t.prototype._subscribe.call(this,e);return!n.closed&&e.next(this._value),n},e.prototype.getValue=function(){var t=this,e=t.hasError,n=t.thrownError,r=t._value;if(e)throw n;return this._throwIfClosed(),r},e.prototype.next=function(e){t.prototype.next.call(this,this._value=e)},e}(rt);function At(t,n){return e(function(t,e,n,r,i){return function(r,i){var o=n,s=e,u=0;r.subscribe(C(i,(function(e){var n=u++;s=o?t(s,e,n):(o=!0,e),i.next(s)}),undefined))}}(t,n,arguments.length>=2))}function kt(n,r,i){return void 0===i&&(i=1/0),t(r)?kt((function(t,e){return $((function(n,i){return r(t,n,e,i)}))(K(n(t,e)))}),i):("number"==typeof r&&(i=r),e((function(t,e){return function(t,e,n,r,i,o,s,u){var c=[],a=0,l=0,f=!1,h=function(){!f||c.length||a||e.complete()},d=function(t){return a<r?p(t):c.push(t)},p=function(t){a++;var i=!1;K(n(t,l++)).subscribe(C(e,(function(t){e.next(t)}),(function(){i=!0}),void 0,(function(){if(i)try{a--;for(;c.length&&a<r;)t=void 0,t=c.shift(),p(t);h()}catch(t){e.error(t)}var t})))};return t.subscribe(C(e,d,(function(){f=!0,h()}))),function(){}}(t,e,n,i)})))}function jt(t){return void 0===t&&(t=1/0),kt(z,t)}function Pt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return jt(1)(wt(t,tt(t)))}function Ot(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=tt(t);return e((function(e,n){(r?Pt(t,e,r):Pt(t,e)).subscribe(n)}))}function Ct(t,n){return e((function(e,r){var i=null,o=0,s=!1,u=function(){return s&&!i&&r.complete()};e.subscribe(C(r,(function(e){null==i||i.unsubscribe();var s=0,c=o++;K(t(e,c)).subscribe(i=C(r,(function(t){return r.next(n?n(e,t,c,s++):t)}),(function(){i=null,u()})))}),(function(){s=!0,u()})))}))}var Tt=["addListener","removeListener"],zt=["addEventListener","removeEventListener"],Bt=["on","off"];function $t(e,n,r,i){if(t(r)&&(i=r,r=void 0),i)return $t(e,n,r).pipe(Et(i));var o=s(function(e){return t(e.addEventListener)&&t(e.removeEventListener)}(e)?zt.map((function(t){return function(i){return e[t](n,i,r)}})):function(e){return t(e.addListener)&&t(e.removeListener)}(e)?Tt.map(Rt(e,n)):function(e){return t(e.on)&&t(e.off)}(e)?Bt.map(Rt(e,n)):[],2),u=o[0],c=o[1];if(!u&&R(e))return kt((function(t){return $t(t,n,r)}))(K(e));if(!u)throw new TypeError("Invalid event target");return new N((function(t){var e=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return t.next(1<e.length?e:e[0])};return u(e),function(){return c(e)}}))}function Rt(t,e){return function(n){return function(r){return t[n](e,r)}}}class Lt{static initializeCanvas(t){Lt.canvas=document.getElementById(t),Lt.ctx=Lt.canvas.getContext("2d")}static fillBackground(t){Lt.ctx.clearRect(0,0,Lt.canvas.width,Lt.canvas.height),Lt.ctx.fillStyle=t,Lt.ctx.fillRect(0,0,Lt.canvas.width,Lt.canvas.height)}}function Ht(t,e){return Lt.canvas.width,Lt.canvas.height,Array.from({length:t},(()=>e()))}function Nt(t){const e=t.length;let n=t.filter((t=>t.sex)).length,r=e-n;return e>350&&(n=Math.round(n/e*350),r=350-n),[n,r]}function Dt(t){return $t(document.getElementById(t),"input").pipe($((t=>parseInt(t.target.value))),Ot(parseFloat(document.getElementById(t).value)))}function Gt(t){return $t(document.getElementById(t),"click")}const Ft=class{constructor(t,e){this.x=t,this.y=e}static areNear(t,e,n=50){return Math.sqrt((t.x-e.x)**2+(t.y-e.y)**2)<=n}},Ut=class extends Ft{constructor(t,e,n){super(t,e),this.x=t,this.y=e,this.isBorn=n,this.lastMated=0,this.maxAge=(4,20,16*Math.random()+4),this.age=n?0:Math.random()*this.maxAge,this.maxEnergy=100-5*this.age,this.energy=this.maxEnergy,this.dx=2*Math.random()-1,this.dy=2*Math.random()-1,this.sex=Math.random()>.5}isStarving(){return this.energy<=0}isDead(){return this.age>=this.maxAge}isHungry(){return this.energy<.9*this.maxEnergy}adjustEnergy(t){this.energy=Math.max(0,Math.min(this.maxEnergy,this.energy+t))}growOlder(t,e){this.age+=t,this.maxEnergy-=e}canMate(){return this.energy>40&&this.age>1&&this.age<12&&this.age-this.lastMated>1}mate(t){this.lastMated=this.age,t.lastMated=t.age;const e=(this.x+t.x)/2,n=(this.y+t.y)/2;return this.getOffspring(e,n)}move(){const t=.5*Math.random();this.dx+=(2*Math.random()-1)*t,this.dy+=(2*Math.random()-1)*t;const e=Math.sqrt(this.dx*this.dx+this.dy*this.dy);let n;this.dx/=e,this.dy/=e,n=this.energy>=35?1+2*Math.random():Math.random();const r=this.x+this.dx*n,i=this.y+this.dy*n;r<0?(this.x=0,this.dx=Math.abs(this.dx)):r>Lt.canvas.width?(this.x=Lt.canvas.width,this.dx=-Math.abs(this.dx)):this.x=r,i<0?(this.y=0,this.dy=Math.abs(this.dy)):i>Lt.canvas.height?(this.y=Lt.canvas.height,this.dy=-Math.abs(this.dy)):this.y=i}},qt=class extends Ut{};class Yt extends qt{constructor(t,e,n){super(t,e,n),this.x=t,this.y=e,this.isBorn=n,this.color=this.sex?"#ff0000":"#ff4d4d",Dt("foxSizeInput").pipe(B((t=>this.originalSizeRadius=t))).subscribe()}getOffspring(t,e){return new Yt(t,e,!0)}draw(t){t.fillStyle=this.color,t.beginPath(),this.sizeRadius=this.originalSizeRadius+this.age/2,t.arc(this.x,this.y,this.sizeRadius,0,2*Math.PI),t.fill()}}const Vt=Yt,Jt=class extends Ft{constructor(t,e){super(t,e),this.color="darkgreen",Dt("plantSizeInput").pipe(B((t=>this.sizeRadius=t))).subscribe()}draw(t){t.fillStyle=this.color,t.beginPath(),t.arc(this.x,this.y,this.sizeRadius,0,2*Math.PI),t.fill()}},Kt=class extends Ut{};class Qt extends Kt{constructor(t,e,n){super(t,e,n),this.x=t,this.y=e,this.isBorn=n,this.color=this.sex?"#0000ff":"#4d4dff",Dt("rabbitSizeInput").pipe(B((t=>this.originalSizeRadius=t))).subscribe()}getOffspring(t,e){return new Qt(t,e,!0)}draw(t){t.fillStyle=this.color,t.beginPath(),this.sizeRadius=this.originalSizeRadius+this.age/2,t.arc(this.x,this.y,this.sizeRadius,0,2*Math.PI),t.fill()}}const Wt=Qt;class Xt{static addSubscription(t){Xt.subscriptions.push(t)}static clearSubscriptions(){Xt.subscriptions.forEach((t=>t.unsubscribe())),Xt.subscriptions=[]}}Xt.subscriptions=[];class Zt{constructor(){Dt("rabbitAgeAdjustmentInput").subscribe((t=>this.rabbitAgeAdjustment=t)),Dt("foxAgeAdjustmentInput").subscribe((t=>this.foxAgeAdjustment=t)),Dt("rabbitEnergyAdjustmentInput").subscribe((t=>this.rabbitEnergyAdjustment=t)),Dt("foxEnergyAdjustmentInput").subscribe((t=>this.foxEnergyAdjustment=t)),Dt("rabbitMaxEnergyAdjustmentInput").subscribe((t=>this.rabbitMaxEnergyAdjustment=t)),Dt("foxMaxEnergyAdjustmentInput").subscribe((t=>this.foxMaxEnergyAdjustment=t)),Dt("rabbitProximityCheckInput").subscribe((t=>this.rabbitProximityCheck=t)),Dt("foxProximityCheckInput").subscribe((t=>this.foxProximityCheck=t)),Dt("plantMinGeneratorIntervalInput").subscribe((t=>this.plantMinGeneratorInterval=t)),Dt("plantMaxGeneratorIntervalInput").subscribe((t=>this.plantMaxGeneratorInterval=t))}static getInstance(){return Zt.instance||(Zt.instance=new Zt),Zt.instance}}const te=new rt,ee=new rt,ne=new rt,re=te.pipe(At(((t,e)=>t+e),0),Ot(0)),ie=ee.pipe(At(((t,e)=>t+e),0),Ot(0)),oe=ne.pipe(At(((t,e)=>t+e),0),Ot(0)),se=new rt,ue=new rt,ce=new rt,ae=se.pipe(At(((t,e)=>t+e),0),Ot(0)),le=ue.pipe(At(((t,e)=>t+e),0),Ot(0)),fe=ce.pipe(At(((t,e)=>t+e),0),Ot(0));function he(t){const e=Lt.canvas.width,n=Lt.canvas.height;return ht(0).pipe(Ct((()=>ht(Math.random()*(Zt.getInstance().plantMaxGeneratorInterval-Zt.getInstance().plantMinGeneratorInterval)+Zt.getInstance().plantMinGeneratorInterval))),B((()=>{const r=new Jt(Math.random()*e,Math.random()*n),i=t.getValue();i.push(r),t.next(i),te.next(1)})),Ct((()=>he(t))))}function de(t,e,n,r){const i=r.pipe(Ct((t=>{return void 0===(e=t)&&(e=0),void 0===n&&(n=lt),e<0&&(e=0),ht(e,e,n);var e,n}))),o=Ht(t,(()=>new Jt(Math.random()*Lt.canvas.width,Math.random()*Lt.canvas.height))),s=Ht(e,(()=>new Wt(Math.random()*Lt.canvas.width,Math.random()*Lt.canvas.height,!1))),u=Ht(n,(()=>new Vt(Math.random()*Lt.canvas.width,Math.random()*Lt.canvas.height,!1))),c=new Mt(o),a=new Mt(s),l=new Mt(u),f=document.getElementById("animalCount"),h=document.getElementById("plantGraph"),d=document.getElementById("rabbitGraphMale"),p=document.getElementById("rabbitGraphFemale"),v=document.getElementById("foxGraphMale"),y=document.getElementById("foxGraphFemale"),b=St([c,a,l]).pipe($((([t,e,n])=>{const[r,i]=Nt(e),[o,s]=Nt(n);return[t.length,e,r,i,n,o,s]})),B((([t,e,n,r,i,o,s])=>{f.innerHTML=`Plants: ${t} | Rabbits: ${e.length} | Foxes: ${i.length}`,h.style.height=`${t}px`,h.innerHTML=t>=15?`${t}`:"";const u=e.filter((t=>t.sex)).length,c=e.length-u;d.style.height=`${n}px`,d.innerHTML=u>=15?`${u}`:"",p.style.height=`${r}px`,p.innerHTML=c>=15?`${c}`:"";const a=i.filter((t=>t.sex)).length,l=i.length-a;v.style.height=`${o}px`,v.innerHTML=a>=15?`${a}`:"",y.style.height=`${s}px`,y.innerHTML=l>=15?`${l}`:""}))).subscribe();Xt.addSubscription(b);const g=St([re,ie,oe]).pipe(B((([t,e,n])=>{document.getElementById("offspringCount").innerHTML=`New plants: ${t} | New rabbits: ${e} | New foxes: ${n}`}))).subscribe();Xt.addSubscription(g);const m=St([ae,le,fe]).pipe(B((([t,e,n])=>{document.getElementById("deceasedCount").innerHTML=`Deceased plants: ${t} | Deceased rabbits: ${e} | Deceased foxes: ${n}`}))).subscribe();Xt.addSubscription(m);const x=he(c).subscribe();Xt.addSubscription(x);const w=function(t,e,n,r){return t.pipe(et(St([e,n,r])),$((([t,[e,i,o]])=>{const s=function(t,e){const n=[];t.forEach((r=>{if(r.move(),r.adjustEnergy(Zt.getInstance().rabbitEnergyAdjustment),r.isHungry()){const t=e.findIndex((t=>Ft.areNear(r,t,Zt.getInstance().rabbitProximityCheck)));-1!==t&&(e.splice(t,1),r.adjustEnergy(20),se.next(1))}const i=t.findIndex((t=>r.sex!==t.sex&&r!==t&&Ft.areNear(r,t,Zt.getInstance().rabbitProximityCheck+t.sizeRadius)&&r.canMate()&&t.canMate()));if(-1!==i){const e=t[i],o=r.mate(e);n.push(o),ee.next(1)}r.growOlder(Zt.getInstance().rabbitAgeAdjustment,Zt.getInstance().rabbitMaxEnergyAdjustment)}));const r=[...t,...n],i=r.filter((t=>!t.isDead()&&!t.isStarving()));return ue.next(r.length-i.length),i}(i,e),u=function(t,e){const n=[];t.forEach((r=>{if(r.move(),r.adjustEnergy(Zt.getInstance().foxEnergyAdjustment),r.isHungry()){const t=e.findIndex((t=>Ft.areNear(r,t,Zt.getInstance().foxProximityCheck+t.sizeRadius)));-1!==t&&(e.splice(t,1),r.adjustEnergy(50),ue.next(1))}const i=t.findIndex((t=>r.sex!==t.sex&&r!==t&&Ft.areNear(r,t,Zt.getInstance().foxProximityCheck+t.sizeRadius)&&r.canMate()&&t.canMate()));if(-1!==i){const e=t[i],o=r.mate(e);n.push(o),ne.next(1)}r.growOlder(Zt.getInstance().foxAgeAdjustment,Zt.getInstance().foxMaxEnergyAdjustment)}));const r=[...t,...n],i=r.filter((t=>!t.isDead()&&!t.isStarving()));return ce.next(r.length-i.length),i}(o,s);return n.next(s),r.next(u),[e,s,u]})))}(i,c,a,l),I=w.subscribe();Xt.addSubscription(I);const E=w.pipe(B((([t,e,n])=>{Lt.fillBackground("lightgreen"),t.forEach((t=>t.draw(Lt.ctx))),e.forEach((t=>t.draw(Lt.ctx))),n.forEach((t=>t.draw(Lt.ctx)))}))),S=E.subscribe();Xt.addSubscription(S)}var pe=new N((function(t){return t.complete()}));Lt.initializeCanvas("ecosystemCanvas"),Lt.fillBackground("lightgreen"),Zt.getInstance();const ve=document.getElementById("settingsBtn"),ye=document.getElementById("graphBtn"),be=document.getElementById("settingsPanel"),ge=document.getElementById("graphPanel");(function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=tt(t),r=function(t,e){return"number"==typeof X(t)?t.pop():1/0}(t),i=t;return i.length?1===i.length?K(i[0]):jt(r)(wt(i,n)):pe})($t(ve,"click").pipe(B((()=>{"flex"===be.style.display?ve.style.backgroundColor="rgb(70, 70, 70)":(ve.style.backgroundColor="rgb(100, 100, 100)",ye.style.backgroundColor="rgb(70, 70, 70)")})),$((()=>"flex"===be.style.display?"close":"settings"))),$t(ye,"click").pipe(B((()=>{"block"===ge.style.display?ye.style.backgroundColor="rgb(70, 70, 70)":(ye.style.backgroundColor="rgb(100, 100, 100)",ve.style.backgroundColor="rgb(70, 70, 70)")})),$((()=>"block"===ge.style.display?"close":"graph")))).pipe(B((t=>{"settings"===t?(be.style.display="flex",ge.style.display="none"):"graph"===t?(be.style.display="none",ge.style.display="block"):"close"===t&&(be.style.display="none",ge.style.display="none")}))).subscribe();const me=new Mt(parseInt(document.getElementById("simulationSpeedInput").value));Dt("simulationSpeedInput").pipe(B((t=>document.getElementById("simulationSpeedSpan").innerText=`Simulation speed (${t}fps):`)),$((t=>Math.ceil(1e3/t))),B((t=>{console.log(t),me.next(t)}))).subscribe(),Gt("startBtn").pipe(et(Dt("plantCountInput"),Dt("rabbitCountInput"),Dt("foxCountInput")),B((([t,e,n,r])=>{Lt.fillBackground("lightgreen"),Xt.clearSubscriptions(),de(e,n,r,me)}))).subscribe(),Gt("stopBtn").pipe(B((()=>Xt.clearSubscriptions()))).subscribe()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,