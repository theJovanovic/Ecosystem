(()=>{"use strict";class t{static initializeCanvas(e){t.canvas=document.getElementById(e),t.ctx=t.canvas.getContext("2d")}static fillBackground(e){t.ctx.clearRect(0,0,t.canvas.width,t.canvas.height),t.ctx.fillStyle=e,t.ctx.fillRect(0,0,t.canvas.width,t.canvas.height)}}var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},e(t,n)};function n(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}function r(t,e){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(u){return function(c){return function(u){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,u[0]&&(s=0)),s;)try{if(n=1,r&&(i=2&u[0]?r.return:u[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,u[1])).done)return i;switch(r=0,i&&(u=[2&u[0],i.value]),u[0]){case 0:case 1:i=u;break;case 4:return s.label++,{value:u[1],done:!1};case 5:s.label++,r=u[1],u=[0];continue;case 7:u=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==u[0]&&2!==u[0])){s=0;continue}if(3===u[0]&&(!i||u[1]>i[0]&&u[1]<i[3])){s.label=u[1];break}if(6===u[0]&&s.label<i[1]){s.label=i[1],i=u;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(u);break}i[2]&&s.ops.pop(),s.trys.pop();continue}u=e.call(t,s)}catch(t){u=[6,t],r=0}finally{n=i=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,c])}}}function i(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function o(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)s.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return s}function s(t,e,n){if(n||2===arguments.length)for(var r,i=0,o=e.length;i<o;i++)!r&&i in e||(r||(r=Array.prototype.slice.call(e,0,i)),r[i]=e[i]);return t.concat(r||Array.prototype.slice.call(e))}function u(t){return this instanceof u?(this.v=t,this):new u(t)}Object.create,Object.create;var c=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function a(t){return"function"==typeof t}function l(t){return a(null==t?void 0:t.then)}function f(t){var e=t((function(t){Error.call(t),t.stack=(new Error).stack}));return e.prototype=Object.create(Error.prototype),e.prototype.constructor=e,e}var h=f((function(t){return function(e){t(this),this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e}}));function d(t,e){if(t){var n=t.indexOf(e);0<=n&&t.splice(n,1)}}var p=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._finalizers=null}return t.prototype.unsubscribe=function(){var t,e,n,r,u;if(!this.closed){this.closed=!0;var c=this._parentage;if(c)if(this._parentage=null,Array.isArray(c))try{for(var l=i(c),f=l.next();!f.done;f=l.next())f.value.remove(this)}catch(e){t={error:e}}finally{try{f&&!f.done&&(e=l.return)&&e.call(l)}finally{if(t)throw t.error}}else c.remove(this);var d=this.initialTeardown;if(a(d))try{d()}catch(t){u=t instanceof h?t.errors:[t]}var p=this._finalizers;if(p){this._finalizers=null;try{for(var y=i(p),v=y.next();!v.done;v=y.next()){var g=v.value;try{b(g)}catch(t){u=null!=u?u:[],t instanceof h?u=s(s([],o(u)),o(t.errors)):u.push(t)}}}catch(t){n={error:t}}finally{try{v&&!v.done&&(r=y.return)&&r.call(y)}finally{if(n)throw n.error}}}if(u)throw new h(u)}},t.prototype.add=function(e){var n;if(e&&e!==this)if(this.closed)b(e);else{if(e instanceof t){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(e)}},t.prototype._hasParent=function(t){var e=this._parentage;return e===t||Array.isArray(e)&&e.includes(t)},t.prototype._addParent=function(t){var e=this._parentage;this._parentage=Array.isArray(e)?(e.push(t),e):e?[e,t]:t},t.prototype._removeParent=function(t){var e=this._parentage;e===t?this._parentage=null:Array.isArray(e)&&d(e,t)},t.prototype.remove=function(e){var n=this._finalizers;n&&d(n,e),e instanceof t&&e._removeParent(this)},t.EMPTY=((e=new t).closed=!0,e),t;var e}(),y=p.EMPTY;function v(t){return t instanceof p||t&&"closed"in t&&a(t.remove)&&a(t.add)&&a(t.unsubscribe)}function b(t){a(t)?t():t.unsubscribe()}var g={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},m={setTimeout:function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i=m.delegate;return(null==i?void 0:i.setTimeout)?i.setTimeout.apply(i,s([t,e],o(n))):setTimeout.apply(void 0,s([t,e],o(n)))},clearTimeout:function(t){var e=m.delegate;return((null==e?void 0:e.clearTimeout)||clearTimeout)(t)},delegate:void 0};function x(t){m.setTimeout((function(){var e=g.onUnhandledError;if(!e)throw t;e(t)}))}function w(){}var I=E("C",void 0,void 0);function E(t,e,n){return{kind:t,value:e,error:n}}var S=null;function _(t){if(g.useDeprecatedSynchronousErrorHandling){var e=!S;if(e&&(S={errorThrown:!1,error:null}),t(),e){var n=S,r=n.errorThrown,i=n.error;if(S=null,r)throw i}}else t()}var M=function(t){function e(e){var n=t.call(this)||this;return n.isStopped=!1,e?(n.destination=e,v(e)&&e.add(n)):n.destination=T,n}return n(e,t),e.create=function(t,e,n){return new P(t,e,n)},e.prototype.next=function(t){this.isStopped?C(function(t){return E("N",t,void 0)}(t),this):this._next(t)},e.prototype.error=function(t){this.isStopped?C(E("E",void 0,t),this):(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped?C(I,this):(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},e.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},e}(p),A=Function.prototype.bind;function k(t,e){return A.call(t,e)}var j=function(){function t(t){this.partialObserver=t}return t.prototype.next=function(t){var e=this.partialObserver;if(e.next)try{e.next(t)}catch(t){O(t)}},t.prototype.error=function(t){var e=this.partialObserver;if(e.error)try{e.error(t)}catch(t){O(t)}else O(t)},t.prototype.complete=function(){var t=this.partialObserver;if(t.complete)try{t.complete()}catch(t){O(t)}},t}(),P=function(t){function e(e,n,r){var i,o,s=t.call(this)||this;return a(e)||!e?i={next:null!=e?e:void 0,error:null!=n?n:void 0,complete:null!=r?r:void 0}:s&&g.useDeprecatedNextContext?((o=Object.create(e)).unsubscribe=function(){return s.unsubscribe()},i={next:e.next&&k(e.next,o),error:e.error&&k(e.error,o),complete:e.complete&&k(e.complete,o)}):i=e,s.destination=new j(i),s}return n(e,t),e}(M);function O(t){var e;g.useDeprecatedSynchronousErrorHandling?(e=t,g.useDeprecatedSynchronousErrorHandling&&S&&(S.errorThrown=!0,S.error=e)):x(t)}function C(t,e){var n=g.onStoppedNotification;n&&m.setTimeout((function(){return n(t,e)}))}var T={closed:!0,next:w,error:function(t){throw t},complete:w},B="function"==typeof Symbol&&Symbol.observable||"@@observable";function z(t){return t}var $=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var r,i=this,o=(r=t)&&r instanceof M||function(t){return t&&a(t.next)&&a(t.error)&&a(t.complete)}(r)&&v(r)?t:new P(t,e,n);return _((function(){var t=i,e=t.operator,n=t.source;o.add(e?e.call(o,n):n?i._subscribe(o):i._trySubscribe(o))})),o},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){t.error(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=R(e))((function(e,r){var i=new P({next:function(e){try{t(e)}catch(t){r(t),i.unsubscribe()}},error:r,complete:e});n.subscribe(i)}))},t.prototype._subscribe=function(t){var e;return null===(e=this.source)||void 0===e?void 0:e.subscribe(t)},t.prototype[B]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return(0===(n=t).length?z:1===n.length?n[0]:function(t){return n.reduce((function(t,e){return e(t)}),t)})(this);var n},t.prototype.toPromise=function(t){var e=this;return new(t=R(t))((function(t,n){var r;e.subscribe((function(t){return r=t}),(function(t){return n(t)}),(function(){return t(r)}))}))},t.create=function(e){return new t(e)},t}();function R(t){var e;return null!==(e=null!=t?t:g.Promise)&&void 0!==e?e:Promise}function L(t){return a(t[B])}function H(t){return Symbol.asyncIterator&&a(null==t?void 0:t[Symbol.asyncIterator])}function N(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var D="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function F(t){return a(null==t?void 0:t[D])}function G(t){return function(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(t,e||[]),o=[];return r={},s("next"),s("throw"),s("return"),r[Symbol.asyncIterator]=function(){return this},r;function s(t){i[t]&&(r[t]=function(e){return new Promise((function(n,r){o.push([t,e,n,r])>1||c(t,e)}))})}function c(t,e){try{(n=i[t](e)).value instanceof u?Promise.resolve(n.value.v).then(a,l):f(o[0][2],n)}catch(t){f(o[0][3],t)}var n}function a(t){c("next",t)}function l(t){c("throw",t)}function f(t,e){t(e),o.shift(),o.length&&c(o[0][0],o[0][1])}}(this,arguments,(function(){var e,n,i;return r(this,(function(r){switch(r.label){case 0:e=t.getReader(),r.label=1;case 1:r.trys.push([1,,9,10]),r.label=2;case 2:return[4,u(e.read())];case 3:return n=r.sent(),i=n.value,n.done?[4,u(void 0)]:[3,5];case 4:return[2,r.sent()];case 5:return[4,u(i)];case 6:return[4,r.sent()];case 7:return r.sent(),[3,2];case 8:return[3,10];case 9:return e.releaseLock(),[7];case 10:return[2]}}))}))}function U(t){return a(null==t?void 0:t.getReader)}function q(t){if(t instanceof $)return t;if(null!=t){if(L(t))return o=t,new $((function(t){var e=o[B]();if(a(e.subscribe))return e.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(c(t))return r=t,new $((function(t){for(var e=0;e<r.length&&!t.closed;e++)t.next(r[e]);t.complete()}));if(l(t))return n=t,new $((function(t){n.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,x)}));if(H(t))return Y(t);if(F(t))return e=t,new $((function(t){var n,r;try{for(var o=i(e),s=o.next();!s.done;s=o.next()){var u=s.value;if(t.next(u),t.closed)return}}catch(t){n={error:t}}finally{try{s&&!s.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}t.complete()}));if(U(t))return Y(G(t))}var e,n,r,o;throw N(t)}function Y(t){return new $((function(e){(function(t,e){var n,o,s,u,c,a,l,f;return c=this,a=void 0,f=function(){var c,a;return r(this,(function(r){switch(r.label){case 0:r.trys.push([0,5,6,11]),n=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=i(t),e={},r("next"),r("throw"),r("return"),e[Symbol.asyncIterator]=function(){return this},e);function r(n){e[n]=t[n]&&function(e){return new Promise((function(r,i){!function(t,e,n,r){Promise.resolve(r).then((function(e){t({value:e,done:n})}),e)}(r,i,(e=t[n](e)).done,e.value)}))}}}(t),r.label=1;case 1:return[4,n.next()];case 2:if((o=r.sent()).done)return[3,4];if(c=o.value,e.next(c),e.closed)return[2];r.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return a=r.sent(),s={error:a},[3,11];case 6:return r.trys.push([6,,9,10]),o&&!o.done&&(u=n.return)?[4,u.call(n)]:[3,8];case 7:r.sent(),r.label=8;case 8:return[3,10];case 9:if(s)throw s.error;return[7];case 10:return[7];case 11:return e.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(t,e){function n(t){try{i(f.next(t))}catch(t){e(t)}}function r(t){try{i(f.throw(t))}catch(t){e(t)}}function i(e){var i;e.done?t(e.value):(i=e.value,i instanceof l?i:new l((function(t){t(i)}))).then(n,r)}i((f=f.apply(c,a||[])).next())}))})(t,e).catch((function(t){return e.error(t)}))}))}function V(t){return function(e){if(function(t){return a(null==t?void 0:t.lift)}(e))return e.lift((function(e){try{return t(e,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}function X(t,e,n,r,i){return new J(t,e,n,r,i)}var J=function(t){function e(e,n,r,i,o,s){var u=t.call(this,e)||this;return u.onFinalize=o,u.shouldUnsubscribe=s,u._next=n?function(t){try{n(t)}catch(t){e.error(t)}}:t.prototype._next,u._error=i?function(t){try{i(t)}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._error,u._complete=r?function(){try{r()}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,u}return n(e,t),e.prototype.unsubscribe=function(){var e;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;t.prototype.unsubscribe.call(this),!n&&(null===(e=this.onFinalize)||void 0===e||e.call(this))}},e}(M);function K(t,e){return V((function(n,r){var i=0;n.subscribe(X(r,(function(n){r.next(t.call(e,n,i++))})))}))}function Q(t,e,n,r,i){void 0===r&&(r=0),void 0===i&&(i=!1);var o=e.schedule((function(){n(),i?t.add(this.schedule(null,r)):this.unsubscribe()}),r);if(t.add(o),!i)return o}function W(t,e,n){return void 0===n&&(n=1/0),a(e)?W((function(n,r){return K((function(t,i){return e(n,t,r,i)}))(q(t(n,r)))}),n):("number"==typeof e&&(n=e),V((function(e,r){return function(t,e,n,r,i,o,s,u){var c=[],a=0,l=0,f=!1,h=function(){!f||c.length||a||e.complete()},d=function(t){return a<r?p(t):c.push(t)},p=function(t){a++;var i=!1;q(n(t,l++)).subscribe(X(e,(function(t){e.next(t)}),(function(){i=!0}),void 0,(function(){if(i)try{a--;for(;c.length&&a<r;)t=void 0,t=c.shift(),p(t);h()}catch(t){e.error(t)}var t})))};return t.subscribe(X(e,d,(function(){f=!0,h()}))),function(){}}(e,r,t,n)})))}var Z=Array.isArray;function tt(t){return K((function(e){return function(t,e){return Z(e)?t.apply(void 0,s([],o(e))):t(e)}(t,e)}))}var et=["addListener","removeListener"],nt=["addEventListener","removeEventListener"],rt=["on","off"];function it(t,e,n,r){if(a(n)&&(r=n,n=void 0),r)return it(t,e,n).pipe(tt(r));var i=o(function(t){return a(t.addEventListener)&&a(t.removeEventListener)}(t)?nt.map((function(r){return function(i){return t[r](e,i,n)}})):function(t){return a(t.addListener)&&a(t.removeListener)}(t)?et.map(ot(t,e)):function(t){return a(t.on)&&a(t.off)}(t)?rt.map(ot(t,e)):[],2),s=i[0],u=i[1];if(!s&&c(t))return W((function(t){return it(t,e,n)}))(q(t));if(!s)throw new TypeError("Invalid event target");return new $((function(t){var e=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return t.next(1<e.length?e:e[0])};return s(e),function(){return u(e)}}))}function ot(t,e){return function(n){return function(r){return t[n](e,r)}}}function st(t){return void 0===t&&(t=1/0),W(z,t)}function ut(t){return t&&a(t.schedule)}function ct(t){return t[t.length-1]}function at(t){return a(ct(t))?t.pop():void 0}function lt(t){return ut(ct(t))?t.pop():void 0}function ft(t,e){return void 0===e&&(e=0),V((function(n,r){n.subscribe(X(r,(function(n){return Q(r,t,(function(){return r.next(n)}),e)}),(function(){return Q(r,t,(function(){return r.complete()}),e)}),(function(n){return Q(r,t,(function(){return r.error(n)}),e)})))}))}function ht(t,e){return void 0===e&&(e=0),V((function(n,r){r.add(t.schedule((function(){return n.subscribe(r)}),e))}))}function dt(t,e){if(!t)throw new Error("Iterable cannot be null");return new $((function(n){Q(n,e,(function(){var r=t[Symbol.asyncIterator]();Q(n,e,(function(){r.next().then((function(t){t.done?n.complete():n.next(t.value)}))}),0,!0)}))}))}function pt(t,e){return e?function(t,e){if(null!=t){if(L(t))return function(t,e){return q(t).pipe(ht(e),ft(e))}(t,e);if(c(t))return function(t,e){return new $((function(n){var r=0;return e.schedule((function(){r===t.length?n.complete():(n.next(t[r++]),n.closed||this.schedule())}))}))}(t,e);if(l(t))return function(t,e){return q(t).pipe(ht(e),ft(e))}(t,e);if(H(t))return dt(t,e);if(F(t))return function(t,e){return new $((function(n){var r;return Q(n,e,(function(){r=t[D](),Q(n,e,(function(){var t,e,i;try{e=(t=r.next()).value,i=t.done}catch(t){return void n.error(t)}i?n.complete():n.next(e)}),0,!0)})),function(){return a(null==r?void 0:r.return)&&r.return()}}))}(t,e);if(U(t))return function(t,e){return dt(G(t),e)}(t,e)}throw N(t)}(t,e):q(t)}function yt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return st(1)(pt(t,lt(t)))}function vt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=lt(t);return V((function(e,r){(n?yt(t,e,n):yt(t,e)).subscribe(r)}))}function bt(t,e,n){var r=a(t)||e||n?{next:t,error:e,complete:n}:t;return r?V((function(t,e){var n;null===(n=r.subscribe)||void 0===n||n.call(r);var i=!0;t.subscribe(X(e,(function(t){var n;null===(n=r.next)||void 0===n||n.call(r,t),e.next(t)}),(function(){var t;i=!1,null===(t=r.complete)||void 0===t||t.call(r),e.complete()}),(function(t){var n;i=!1,null===(n=r.error)||void 0===n||n.call(r,t),e.error(t)}),(function(){var t,e;i&&(null===(t=r.unsubscribe)||void 0===t||t.call(r)),null===(e=r.finalize)||void 0===e||e.call(r)})))})):z}var gt=new $((function(t){return t.complete()}));function mt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=at(t);return V((function(e,r){for(var i=t.length,u=new Array(i),c=t.map((function(){return!1})),a=!1,l=function(e){q(t[e]).subscribe(X(r,(function(t){u[e]=t,a||c[e]||(c[e]=!0,(a=c.every(z))&&(c=null))}),w))},f=0;f<i;f++)l(f);e.subscribe(X(r,(function(t){if(a){var e=s([t],o(u));r.next(n?n.apply(void 0,s([],o(e))):e)}})))}))}var xt=Array.isArray,wt=Object.getPrototypeOf,It=Object.prototype,Et=Object.keys;function St(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=lt(t),r=at(t),i=function(t){if(1===t.length){var e=t[0];if(xt(e))return{args:e,keys:null};if((r=e)&&"object"==typeof r&&wt(r)===It){var n=Et(e);return{args:n.map((function(t){return e[t]})),keys:n}}}var r;return{args:t,keys:null}}(t),o=i.args,s=i.keys;if(0===o.length)return pt([],n);var u=new $(function(t,e,n){return void 0===n&&(n=z),function(r){_t(e,(function(){for(var i=t.length,o=new Array(i),s=i,u=i,c=function(i){_t(e,(function(){var c=pt(t[i],e),a=!1;c.subscribe(X(r,(function(t){o[i]=t,a||(a=!0,u--),u||r.next(n(o.slice()))}),(function(){--s||r.complete()})))}),r)},a=0;a<i;a++)c(a)}),r)}}(o,n,s?function(t){return function(t,e){return t.reduce((function(t,n,r){return t[n]=e[r],t}),{})}(s,t)}:z));return r?u.pipe(tt(r)):u}function _t(t,e,n){t?Q(n,t,e):e()}var Mt=function(t){function e(e,n){return t.call(this)||this}return n(e,t),e.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},e}(p),At={setInterval:function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i=At.delegate;return(null==i?void 0:i.setInterval)?i.setInterval.apply(i,s([t,e],o(n))):setInterval.apply(void 0,s([t,e],o(n)))},clearInterval:function(t){var e=At.delegate;return((null==e?void 0:e.clearInterval)||clearInterval)(t)},delegate:void 0},kt=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r.pending=!1,r}return n(e,t),e.prototype.schedule=function(t,e){var n;if(void 0===e&&(e=0),this.closed)return this;this.state=t;var r=this.id,i=this.scheduler;return null!=r&&(this.id=this.recycleAsyncId(i,r,e)),this.pending=!0,this.delay=e,this.id=null!==(n=this.id)&&void 0!==n?n:this.requestAsyncId(i,this.id,e),this},e.prototype.requestAsyncId=function(t,e,n){return void 0===n&&(n=0),At.setInterval(t.flush.bind(t,this),n)},e.prototype.recycleAsyncId=function(t,e,n){if(void 0===n&&(n=0),null!=n&&this.delay===n&&!1===this.pending)return e;null!=e&&At.clearInterval(e)},e.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,e){var n,r=!1;try{this.work(t)}catch(t){r=!0,n=t||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),n},e.prototype.unsubscribe=function(){if(!this.closed){var e=this.id,n=this.scheduler,r=n.actions;this.work=this.state=this.scheduler=null,this.pending=!1,d(r,this),null!=e&&(this.id=this.recycleAsyncId(n,e,null)),this.delay=null,t.prototype.unsubscribe.call(this)}},e}(Mt),jt={now:function(){return(jt.delegate||Date).now()},delegate:void 0},Pt=function(){function t(e,n){void 0===n&&(n=t.now),this.schedulerActionCtor=e,this.now=n}return t.prototype.schedule=function(t,e,n){return void 0===e&&(e=0),new this.schedulerActionCtor(this,t).schedule(n,e)},t.now=jt.now,t}(),Ot=new(function(t){function e(e,n){void 0===n&&(n=Pt.now);var r=t.call(this,e,n)||this;return r.actions=[],r._active=!1,r}return n(e,t),e.prototype.flush=function(t){var e=this.actions;if(this._active)e.push(t);else{var n;this._active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this._active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}},e}(Pt))(kt),Ct=Ot;function Tt(t,e,n){void 0===t&&(t=0),void 0===n&&(n=Ct);var r=-1;return null!=e&&(ut(e)?n=e:r=e),new $((function(e){var i,o=(i=t)instanceof Date&&!isNaN(i)?+t-n.now():t;o<0&&(o=0);var s=0;return n.schedule((function(){e.closed||(e.next(s++),0<=r?this.schedule(void 0,r):e.complete())}),o)}))}function Bt(t,e){return V((function(n,r){var i=null,o=0,s=!1,u=function(){return s&&!i&&r.complete()};n.subscribe(X(r,(function(n){null==i||i.unsubscribe();var s=0,c=o++;q(t(n,c)).subscribe(i=X(r,(function(t){return r.next(e?e(n,t,c,s++):t)}),(function(){i=null,u()})))}),(function(){s=!0,u()})))}))}class zt{static addSubscription(t){zt.subscriptions.push(t)}static clearSubscriptions(){zt.subscriptions.forEach((t=>t.unsubscribe())),zt.subscriptions=[]}}zt.subscriptions=[];var $t=f((function(t){return function(){t(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),Rt=function(t){function e(){var e=t.call(this)||this;return e.closed=!1,e.currentObservers=null,e.observers=[],e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return n(e,t),e.prototype.lift=function(t){var e=new Lt(this,this);return e.operator=t,e},e.prototype._throwIfClosed=function(){if(this.closed)throw new $t},e.prototype.next=function(t){var e=this;_((function(){var n,r;if(e._throwIfClosed(),!e.isStopped){e.currentObservers||(e.currentObservers=Array.from(e.observers));try{for(var o=i(e.currentObservers),s=o.next();!s.done;s=o.next())s.value.next(t)}catch(t){n={error:t}}finally{try{s&&!s.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}}}))},e.prototype.error=function(t){var e=this;_((function(){if(e._throwIfClosed(),!e.isStopped){e.hasError=e.isStopped=!0,e.thrownError=t;for(var n=e.observers;n.length;)n.shift().error(t)}}))},e.prototype.complete=function(){var t=this;_((function(){if(t._throwIfClosed(),!t.isStopped){t.isStopped=!0;for(var e=t.observers;e.length;)e.shift().complete()}}))},e.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(e.prototype,"observed",{get:function(){var t;return(null===(t=this.observers)||void 0===t?void 0:t.length)>0},enumerable:!1,configurable:!0}),e.prototype._trySubscribe=function(e){return this._throwIfClosed(),t.prototype._trySubscribe.call(this,e)},e.prototype._subscribe=function(t){return this._throwIfClosed(),this._checkFinalizedStatuses(t),this._innerSubscribe(t)},e.prototype._innerSubscribe=function(t){var e=this,n=this,r=n.hasError,i=n.isStopped,o=n.observers;return r||i?y:(this.currentObservers=null,o.push(t),new p((function(){e.currentObservers=null,d(o,t)})))},e.prototype._checkFinalizedStatuses=function(t){var e=this,n=e.hasError,r=e.thrownError,i=e.isStopped;n?t.error(r):i&&t.complete()},e.prototype.asObservable=function(){var t=new $;return t.source=this,t},e.create=function(t,e){return new Lt(t,e)},e}($),Lt=function(t){function e(e,n){var r=t.call(this)||this;return r.destination=e,r.source=n,r}return n(e,t),e.prototype.next=function(t){var e,n;null===(n=null===(e=this.destination)||void 0===e?void 0:e.next)||void 0===n||n.call(e,t)},e.prototype.error=function(t){var e,n;null===(n=null===(e=this.destination)||void 0===e?void 0:e.error)||void 0===n||n.call(e,t)},e.prototype.complete=function(){var t,e;null===(e=null===(t=this.destination)||void 0===t?void 0:t.complete)||void 0===e||e.call(t)},e.prototype._subscribe=function(t){var e,n;return null!==(n=null===(e=this.source)||void 0===e?void 0:e.subscribe(t))&&void 0!==n?n:y},e}(Rt),Ht=function(t){function e(e){var n=t.call(this)||this;return n._value=e,n}return n(e,t),Object.defineProperty(e.prototype,"value",{get:function(){return this.getValue()},enumerable:!1,configurable:!0}),e.prototype._subscribe=function(e){var n=t.prototype._subscribe.call(this,e);return!n.closed&&e.next(this._value),n},e.prototype.getValue=function(){var t=this,e=t.hasError,n=t.thrownError,r=t._value;if(e)throw n;return this._throwIfClosed(),r},e.prototype.next=function(e){t.prototype.next.call(this,this._value=e)},e}(Rt);function Nt(t,e){return V(function(t,e,n,r,i){return function(r,i){var o=n,s=e,u=0;r.subscribe(X(i,(function(e){var n=u++;s=o?t(s,e,n):(o=!0,e),i.next(s)}),undefined))}}(t,e,arguments.length>=2))}function Dt(e,n){return t.canvas.width,t.canvas.height,Array.from({length:e},(()=>n()))}function Ft(t){const e=t.length;let n=t.filter((t=>t.sex)).length,r=e-n;return e>350&&(n=Math.round(n/e*350),r=350-n),[n,r]}function Gt(t,e,n){const r=t-n.x,i=e-n.y;return Math.sqrt(r*r+i*i)<=n.sizeRadius}const Ut=class{constructor(t,e){this.x=t,this.y=e}static areNear(t,e,n=50){return Math.sqrt((t.x-e.x)**2+(t.y-e.y)**2)<=n}},qt=class extends Ut{constructor(t,e,n){super(t,e),this.x=t,this.y=e,this.isBorn=n,this.lastMated=0,this.maxAge=(4,20,16*Math.random()+4),this.age=n?0:Math.random()*this.maxAge,this.maxEnergy=100-5*this.age,this.energy=this.maxEnergy,this.dx=2*Math.random()-1,this.dy=2*Math.random()-1,this.sex=Math.random()>.5}isStarving(){return this.energy<=0}isDead(){return this.age>=this.maxAge}isHungry(){return this.energy<.9*this.maxEnergy}adjustEnergy(t){this.energy=Math.max(0,Math.min(this.maxEnergy,this.energy+t))}growOlder(t,e){this.age+=t,this.maxEnergy-=e}canMate(){return this.energy>40&&this.age>1&&this.age<12&&this.age-this.lastMated>1}mate(t){this.lastMated=this.age,t.lastMated=t.age;const e=(this.x+t.x)/2,n=(this.y+t.y)/2;return this.getOffspring(e,n)}move(){const e=.5*Math.random();this.dx+=(2*Math.random()-1)*e,this.dy+=(2*Math.random()-1)*e;const n=Math.sqrt(this.dx*this.dx+this.dy*this.dy);let r;this.dx/=n,this.dy/=n,r=this.energy>=35?1+2*Math.random():Math.random();const i=this.x+this.dx*r,o=this.y+this.dy*r;i<0?(this.x=0,this.dx=Math.abs(this.dx)):i>t.canvas.width?(this.x=t.canvas.width,this.dx=-Math.abs(this.dx)):this.x=i,o<0?(this.y=0,this.dy=Math.abs(this.dy)):o>t.canvas.height?(this.y=t.canvas.height,this.dy=-Math.abs(this.dy)):this.y=o}},Yt=class extends qt{};class Vt extends Yt{constructor(t,e,n){super(t,e,n),this.x=t,this.y=e,this.isBorn=n,this.color=this.sex?"#ff0000":"#ff4d4d",ve("foxSizeInput").pipe(bt((t=>this.originalSizeRadius=t))).subscribe()}getOffspring(t,e){return new Vt(t,e,!0)}draw(t){t.fillStyle=this.color,t.beginPath(),this.sizeRadius=this.originalSizeRadius+this.age/2,t.arc(this.x,this.y,this.sizeRadius,0,2*Math.PI),t.fill()}}const Xt=Vt,Jt=class extends Ut{constructor(t,e){super(t,e),this.color="darkgreen",ve("plantSizeInput").pipe(bt((t=>this.sizeRadius=t))).subscribe()}draw(t){t.fillStyle=this.color,t.beginPath(),t.arc(this.x,this.y,this.sizeRadius,0,2*Math.PI),t.fill()}},Kt=class extends qt{};class Qt extends Kt{constructor(t,e,n){super(t,e,n),this.x=t,this.y=e,this.isBorn=n,this.color=this.sex?"#0000ff":"#4d4dff",ve("rabbitSizeInput").pipe(bt((t=>this.originalSizeRadius=t))).subscribe()}getOffspring(t,e){return new Qt(t,e,!0)}draw(t){t.fillStyle=this.color,t.beginPath(),this.sizeRadius=this.originalSizeRadius+this.age/2,t.arc(this.x,this.y,this.sizeRadius,0,2*Math.PI),t.fill()}}const Wt=Qt,Zt=new Rt,te=new Rt,ee=new Rt,ne=Zt.pipe(Nt(((t,e)=>t+e),0),vt(0)),re=te.pipe(Nt(((t,e)=>t+e),0),vt(0)),ie=ee.pipe(Nt(((t,e)=>t+e),0),vt(0)),oe=new Rt,se=new Rt,ue=new Rt,ce=oe.pipe(Nt(((t,e)=>t+e),0),vt(0)),ae=se.pipe(Nt(((t,e)=>t+e),0),vt(0)),le=ue.pipe(Nt(((t,e)=>t+e),0),vt(0));function fe(e,n,r,i,o){const s=St([i,o]).pipe(Bt((([t,e])=>{return e?(void 0===(n=t)&&(n=0),void 0===r&&(r=Ot),n<0&&(n=0),Tt(n,n,r)):gt;var n,r}))),u=Dt(e,(()=>new Jt(Math.random()*t.canvas.width,Math.random()*t.canvas.height))),c=Dt(n,(()=>new Wt(Math.random()*t.canvas.width,Math.random()*t.canvas.height,!1))),a=Dt(r,(()=>new Xt(Math.random()*t.canvas.width,Math.random()*t.canvas.height,!1))),l=new Ht(u),f=new Ht(c),h=new Ht(a),d=document.getElementById("animalCount"),p=document.getElementById("plantGraph"),y=document.getElementById("rabbitGraphMale"),v=document.getElementById("rabbitGraphFemale"),b=document.getElementById("foxGraphMale"),g=document.getElementById("foxGraphFemale"),m=St([l,f,h]).pipe(K((([t,e,n])=>{const[r,i]=Ft(e),[o,s]=Ft(n);return[t.length,e,r,i,n,o,s]})),bt((([t,e,n,r,i,o,s])=>{d.innerHTML=`Plants: ${t} | Rabbits: ${e.length} | Foxes: ${i.length}`,p.style.height=`${t}px`,p.innerHTML=t>=15?`${t}`:"";const u=e.filter((t=>t.sex)).length,c=e.length-u;y.style.height=`${n}px`,y.innerHTML=u>=15?`${u}`:"",v.style.height=`${r}px`,v.innerHTML=c>=15?`${c}`:"";const a=i.filter((t=>t.sex)).length,l=i.length-a;b.style.height=`${o}px`,b.innerHTML=a>=15?`${a}`:"",g.style.height=`${s}px`,g.innerHTML=l>=15?`${l}`:""}))).subscribe();zt.addSubscription(m);const x=St([ne,re,ie]).pipe(bt((([t,e,n])=>{document.getElementById("offspringCount").innerHTML=`New plants: ${t} | New rabbits: ${e} | New foxes: ${n}`}))).subscribe();zt.addSubscription(x);const w=St([ce,ae,le]).pipe(bt((([t,e,n])=>{document.getElementById("deceasedCount").innerHTML=`Deceased plants: ${t} | Deceased rabbits: ${e} | Deceased foxes: ${n}`}))).subscribe();zt.addSubscription(w);const I=ge(l,Zt,o).subscribe();zt.addSubscription(I);const E=function(t,e,n,r,i,o,s,u,c){return t.pipe(mt(St([e,r,s])),K((([t,[e,a,l]])=>{const f=function(t,e,n,r,i){const o=[];t.forEach((n=>{if(n.move(),n.adjustEnergy(me.getInstance().rabbitEnergyAdjustment),n.isHungry()){const t=r.findIndex((t=>Ut.areNear(n,t,me.getInstance().rabbitProximityCheck)));-1!==t&&(r.splice(t,1),n.adjustEnergy(20),i.next(1))}const s=t.findIndex((t=>n.sex!==t.sex&&n!==t&&Ut.areNear(n,t,me.getInstance().rabbitProximityCheck+t.sizeRadius)&&n.canMate()&&t.canMate()));if(-1!==s){const r=t[s],i=n.mate(r);o.push(i),e.next(1)}n.growOlder(me.getInstance().rabbitAgeAdjustment,me.getInstance().rabbitMaxEnergyAdjustment)}));const s=[...t,...o],u=s.filter((t=>!t.isDead()&&!t.isStarving()));return n.next(s.length-u.length),u}(a,i,o,e,n),h=function(t,e,n,r,i){const o=[];t.forEach((n=>{if(n.move(),n.adjustEnergy(me.getInstance().foxEnergyAdjustment),n.isHungry()){const t=r.findIndex((t=>Ut.areNear(n,t,me.getInstance().foxProximityCheck+t.sizeRadius)));-1!==t&&(r.splice(t,1),n.adjustEnergy(50),i.next(1))}const s=t.findIndex((t=>n.sex!==t.sex&&n!==t&&Ut.areNear(n,t,me.getInstance().foxProximityCheck+t.sizeRadius)&&n.canMate()&&t.canMate()));if(-1!==s){const r=t[s],i=n.mate(r);o.push(i),e.next(1)}n.growOlder(me.getInstance().foxAgeAdjustment,me.getInstance().foxMaxEnergyAdjustment)}));const s=[...t,...o],u=s.filter((t=>!t.isDead()&&!t.isStarving()));return n.next(s.length-u.length),u}(l,u,c,f,o);return r.next(f),s.next(h),[e,f,h]})))}(s,l,oe,f,te,se,h,ee,ue),S=E.subscribe();zt.addSubscription(S);const _=function(e,n){return it(t.canvas,"click").pipe(K((e=>function(e){const n=t.canvas.getBoundingClientRect(),r=n.width/t.canvas.width,i=n.height/t.canvas.height;return{x:(e.clientX-n.left)/r,y:(e.clientY-n.top)/i}}(e))),mt(St([e,n])),K((([t,[e,n]])=>{const r=e.find((e=>Gt(t.x,t.y,e))),i=n.find((e=>Gt(t.x,t.y,e)));return r||i})),(r=t=>!!t,V((function(t,e){var n=0;t.subscribe(X(e,(function(t){return r.call(undefined,t,n++)&&e.next(t)})))}))),bt((t=>{alert(`\n        ${t instanceof Xt?"FOX":"RABBIT"}\n\n        Sex: ${t.sex?"male":"female"}\n\n        Age: ${t.age.toFixed(2)} year(s)\n\n        Energy: ${t.energy.toFixed(2)} / ${t.maxEnergy.toFixed(2)}\n\n      `)})));var r}(f,h),M=_.subscribe();zt.addSubscription(M);const A=E.pipe(bt((([e,n,r])=>{t.fillBackground("lightgreen"),e.forEach((e=>e.draw(t.ctx))),n.forEach((e=>e.draw(t.ctx))),r.forEach((e=>e.draw(t.ctx)))}))),k=A.subscribe();zt.addSubscription(k)}const he=document.getElementById("settingsBtn"),de=document.getElementById("graphBtn"),pe=document.getElementById("settingsPanel"),ye=document.getElementById("graphPanel");function ve(t){return it(document.getElementById(t),"input").pipe(K((t=>parseInt(t.target.value))),vt(parseFloat(document.getElementById(t).value)))}function be(t){return it(document.getElementById(t),"click")}function ge(e,n,r){const i=t.canvas.width,o=t.canvas.height;return St([r,Tt(0)]).pipe(Bt((([t])=>t?Tt(Math.random()*(me.getInstance().plantMaxGeneratorInterval-me.getInstance().plantMinGeneratorInterval)+me.getInstance().plantMinGeneratorInterval).pipe(bt((()=>{const t=new Jt(Math.random()*i,Math.random()*o),r=e.getValue();r.push(t),e.next(r),n.next(1)})),Bt((()=>ge(e,n,r)))):gt)))}class me{constructor(){ve("rabbitAgeAdjustmentInput").subscribe((t=>this.rabbitAgeAdjustment=t)),ve("foxAgeAdjustmentInput").subscribe((t=>this.foxAgeAdjustment=t)),ve("rabbitEnergyAdjustmentInput").subscribe((t=>this.rabbitEnergyAdjustment=t)),ve("foxEnergyAdjustmentInput").subscribe((t=>this.foxEnergyAdjustment=t)),ve("rabbitMaxEnergyAdjustmentInput").subscribe((t=>this.rabbitMaxEnergyAdjustment=t)),ve("foxMaxEnergyAdjustmentInput").subscribe((t=>this.foxMaxEnergyAdjustment=t)),ve("rabbitProximityCheckInput").subscribe((t=>this.rabbitProximityCheck=t)),ve("foxProximityCheckInput").subscribe((t=>this.foxProximityCheck=t)),ve("plantMinGeneratorIntervalInput").subscribe((t=>this.plantMinGeneratorInterval=t)),ve("plantMaxGeneratorIntervalInput").subscribe((t=>this.plantMaxGeneratorInterval=t))}static getInstance(){return me.instance||(me.instance=new me),me.instance}}var xe,we;t.initializeCanvas("ecosystemCanvas"),t.fillBackground("lightgreen"),me.getInstance(),(xe=it(he,"click").pipe(bt((()=>{"flex"===pe.style.display?he.style.backgroundColor="rgb(70, 70, 70)":(he.style.backgroundColor="rgb(100, 100, 100)",de.style.backgroundColor="rgb(70, 70, 70)")})),K((()=>"flex"===pe.style.display?"close":"settings"))),we=it(de,"click").pipe(bt((()=>{"block"===ye.style.display?de.style.backgroundColor="rgb(70, 70, 70)":(de.style.backgroundColor="rgb(100, 100, 100)",he.style.backgroundColor="rgb(70, 70, 70)")})),K((()=>"block"===ye.style.display?"close":"graph"))),function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=lt(t),r=function(t,e){return"number"==typeof ct(t)?t.pop():1/0}(t),i=t;return i.length?1===i.length?q(i[0]):st(r)(pt(i,n)):gt}(xe,we).pipe(bt((t=>{"settings"===t?(pe.style.display="flex",ye.style.display="none"):"graph"===t?(pe.style.display="none",ye.style.display="block"):"close"===t&&(pe.style.display="none",ye.style.display="none")})))).subscribe();const Ie=new Ht(parseInt(document.getElementById("simulationSpeedInput").value));(function(t){return ve("simulationSpeedInput").pipe(bt((t=>document.getElementById("simulationSpeedSpan").innerText=`Simulation speed (${t}fps):`)),K((t=>Math.ceil(1e3/t))),bt((e=>{t.next(e)})))})(Ie).subscribe();const Ee=new Ht(!0);(function(e,n){return be("startBtn").pipe(mt(ve("plantCountInput"),ve("rabbitCountInput"),ve("foxCountInput")),bt((([r,i,o,s])=>{n.next(!0),t.fillBackground("lightgreen"),zt.clearSubscriptions(),fe(i,o,s,e,n)})))})(Ie,Ee).subscribe(),function(t){return be("pauseBtn").pipe(bt((()=>{const e=t.getValue();t.next(!e)})))}(Ee).subscribe()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,